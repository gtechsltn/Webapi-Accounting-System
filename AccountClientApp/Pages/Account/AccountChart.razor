@page "/account/account-chart"
@using AccountClientApp.Models
@using AccountingWebAPI.Models
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3 class="mb-4">Chart of Accounts</h3>

<!-- Form for Adding/Editing Accounts -->
<div class="container mt-4">
    <h3 class="text-center">User Registration</h3>
    <form>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="accountNumber" class="form-label">Account Number</label>
                <input id="accountNumber" @bind="account.account_number" class="form-control" placeholder="Enter account number" />
        </div>
        <div class="col-md-6">
            <label for="accountName" class="form-label">Account Name</label>
                <input id="accountName" @bind="account.account_name" class="form-control" placeholder="Enter account name" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="accountType" class="form-label">Account Type</label>
                <select id="accountType" @bind="account.account_type" class="form-select">
                <option value="">Select account type</option>
                <option>Asset</option>
                <option>Liability</option>
                <option>Equity</option>
                <option>Revenue</option>
                <option>Expense</option>
            </select>
        </div>
        <div class="col-md-6">
            <label for="balance" class="form-label">Balance</label>
                <input id="balance" @bind="account.balance" type="number" class="form-control" placeholder="Enter balance" />
        </div>
    </div>

    <div class="d-flex justify-content-end">
            <button type="submit" class="btn btn-primary me-2" @onclick="HandleValidSubmit">Save</button>
        @* <button type="button" class="btn btn-secondary" @onclick="ClearForm">Cancel</button> *@
    </div>
    </form>
    <p class="mt-3 text-center">@message</p>
</div>

<hr />

<!-- Table for Viewing and Managing Accounts -->
<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Account Number</th>
            <th>Account Name</th>
            <th>Account Type</th>
            <th>Balance</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var account in accountsList)
        {
            <tr>
                <td>@account.account_id</td>
                <td>@account.account_number</td>
                <td>@account.account_name</td>
                <td>@account.account_type</td>
                <td>@account.balance</td>
                <td>
                   @*  <button class="btn btn-warning" @onclick="() => EditAccount(account)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteAccount(account.account_id)">Delete</button> *@
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<accounts> accountsList = new();
    private string message = "";
    private accounts account = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAccountsAsync();
    }

    private async Task LoadAccountsAsync()
    {
        var json_login_info = await localStorage.GetItemAsync<string>("authToken");
        var login_info = JsonSerializer.Deserialize<TokenResponse>(json_login_info);

        //var payload = new { email = login_info.email, old_password = oldPassword, password = newPassword, confirm_password = newPassword };
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", login_info.token);

        var response = await Http.GetFromJsonAsync<accounts>("api/Accounts/GetAccounts");

        message = "successfully!";
    }

    
    private async Task HandleValidSubmit()
    {

        // Add new account
        var json_login_info = await localStorage.GetItemAsync<string>("authToken");
        var login_info = JsonSerializer.Deserialize<TokenResponse>(json_login_info);

        //var payload = new { email = login_info.email, old_password = oldPassword, password = newPassword, confirm_password = newPassword };
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", login_info.token);

        if (account.account_id == 0)
        {         

            var response = await Http.PostAsJsonAsync("api/Accounts/CreateAccount", account);

            message = "Success.";
        }
        else
        {
            // Update existing account
            var response = await Http.PostAsJsonAsync("api/Accounts/UpdateAccoun", account);

            message = "Success.";
        }

        await LoadAccountsAsync();
        ClearForm();
    }

        /*
    private void EditAccount(accounts account)
    {
        currentAccount = new accounts
            {
                account_id = account.account_id,
                account_number = account.account_number,
                account_name = account.account_name,
                account_type = account.account_type,
                balance = account.balance
            };
    }

    private async Task DeleteAccount(int id)
    {
        await AccountService.DeleteAccountAsync(id);
        await LoadAccountsAsync();
    }
    */

    private void ClearForm()
    {
        account = new accounts();
    }


}
